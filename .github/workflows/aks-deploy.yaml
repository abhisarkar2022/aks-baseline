# This workflow will deploy our bootstrapped cluster stamp, without the workload.
#
# Follow the next steps to use this workflow: 
#
# 1. Your repository has the following structure.
#    .
#    ├── .github
#    │   ├── workflows
#    │   │   └── aks-deploy.yaml
#    ├── cluster-manifests
#    │   ├── cluster-baseline-settings/*
#    └── cluster-stamp.bicep
#
# 2. Ensure you have followed the prior sections before deploying this AKS cluster. This way, you will be capable of setting:
#    - the secrets values as detailed in the next step.
#    - the environment variables from the env dictionary at the worklflow level.
#
# 3. Create the following secrets in your GitHub repository:
#    - AZURE_CREDENTIALS                         The Azure Service Principal that will deploy the AKS cluster in your Azure subscription. For more information please take a look at https://github.com/Azure/login#configure-deployment-credentials
#    - APP_GATEWAY_LISTENER_CERTIFICATE_BASE64   The certificate data for app gateway TLS termination. It is base64. Ideally fetch this secret from a platform-managed secret store such as Azure KeyVault: https://github.com/marketplace/actions/azure-key-vault-get-secrets
#    - AKS_INGRESS_CONTROLLER_CERTIFICATE_BASE64 The Base64 encoded AKS Ingress Controller public certificate (as .crt or .cer) to be stored in Azure Key Vault as secret and referenced by Azure Application Gateway as a trusted root certificate.

name: Deploy AKS Baseline cluster

on:
  push:
    paths:
      - 'cluster-stamp.bicep'
      - '.github/workflows/aks-deploy.yaml'
    branches: [ main ]
  pull_request:
    paths:
      - 'cluster-stamp.bicep'
      - '.github/workflows/aks-deploy.yaml'
    branches: [ main ]

env:
  RESOURCE_GROUP_LOCATION: 'canadacentral'                              # The location where the resource group is going to be created
  RESOURCE_GROUP: 'rg-bu0001a0008'                                           # The name for the AKS cluster resource group
  AKS_LOCATION: 'canadacentral'                                         # The location where the AKS cluster is going to be deployed
  GEO_REDUNDANCY_LOCATION: 'canadaeast'                              # The location for Azure resources that support native geo-redunancy. Should be different than the location parameter and ideally should be a paired region - https://docs.microsoft.com/en-us/azure/best-practices-availability-paired-regions. This region does not need to support availability zones.
  TARGET_VNET_RESOURCE_ID: '/subscriptions/9c5ca55e-ea9c-4a3f-b1be-87c76fc15cf8/resourceGroups/rg-enterprise-networking-spokes/providers/Microsoft.Network/virtualNetworks/vnet-spoke-BU0001A0008-00'                       # The regional network spoke VNet Resource ID that the cluster will be joined to
  K8S_RBAC_AAD_PROFILE_TENANTID: '16b3c013-d300-468d-ac64-7eda0820b6d3'          # The tenant to integrate AKS-managed Azure AD
  K8S_RBAC_AAD_PROFILE_ADMIN_GROUP_OBJECTID: 'e3db31b0-98d6-40a5-94f6-0581341e1913' # The Azure AD group object ID that has admin access to the AKS cluster
  K8S_RBAC_AAD_A0008_READER_GROUP_OBJECTID: ''  # The Azure AD group object ID that has readonly access to the a0008 namespace in the AKS cluster
  CLUSTER_AUTHORIZED_IP_RANGES: '[]'                                                # By default, this deployment will allow unrestricted access to your cluster's API Server. You should limit access to the API Server to a set of well-known IP addresses (i.,e. your hub firewall IP, bastion subnet, build agents, or any other networks you'll administer the cluster from), and can do so by adding a CLUSTER_AUTHORIZED_IP_RANGES="['managementRange1', 'managementRange2', 'AzureFirewallIP/32']"" parameter.
  DOMAIN_NAME: 'contoso.com'                                                      # The domain name to use for App Gateway and AKS ingress.
  BOOTSTRAPPING_REPO_HTTPS_URL: 'https://github.com/abhisarkar2022/aks-baseline.git'                    # The git https repo that will be used for bootstrapping your cluster
jobs:
  deploy:
    name: Deploy AKS cluster and Flux
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Login into your Azure Subscription using your Azure credentials - make sure the credentials has write permissions for the specific resource group/subscription. The credentials should be stored in GitHub Secrets - (Go to Settings Tab ->Secrets)
    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubelogin for non-interactive login
      run: |
         curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.9/kubelogin-linux-amd64.zip
         sudo unzip -j kubelogin-linux-amd64.zip -d /usr/local/bin
         rm -f kubelogin-linux-amd64.zip
         kubelogin --version
          
    # If you needed to do any post-deployment bootstrapping that was not already set up you can follow
    # a pattern like the following. They don't do anything meaningful, but are left here as a quickstart
    # guide for your own post-deployment, pipeline-based configuration
    - name: Set the AKS cluster context
      uses: Azure/aks-set-context@v3
      if: github.event_name == 'push'
      with:
        cluster-name: 'aks-ts46ikftguequ'
        resource-group: ${{ env.RESOURCE_GROUP }}
        admin: 'false'
        use-kubelogin: 'true'           

    # Apply a manifest file from this repo. Technically this manifest file does NOT need to be
    # applied. It is a namespace manifest which was already deployed as part of the bootstrapping
    # process.
    - name: Create the cluster-baseline-settings namespace
      uses: Azure/k8s-deploy@v3.1
      if: github.event_name == 'push'
      with:
        namespace: 'cluster-baseline-settings'
        manifests: |
          cluster-manifests/cluster-baseline-settings/ns-cluster-baseline-settings.yaml
